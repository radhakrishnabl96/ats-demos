ATS Native XML Input Specification V1.0
***************************************

.. contents:: **Table of Contents**

  
Syntax of the Specification
###########################

* Input specification for each ParameterList entry consists of two parts.  
  First, a bulleted list defines the usage syntax and available options.  
  This is followed by example snipets of XML code to demonstrate usage.

* In many cases, the input specifies data for a particular parameterized model, and ATS 
  supports a number of parameterizations.  
  For example, initial data might be uniform (the value is required), or linear in y (the value 
  and its gradient are required).  
  Where ATS supports a number of parameterized models for quantity Z, the available 
  models will be listed by name, and then will be described in the subsequent section.  
  For example, the specification for an `"X`" list might begin with the following:

  * `"Y`" ``[string]`` **"default_value"**, `"other`", `"valid`", `"options`"

  * Z ``[Z-spec]`` Model for Z, choose exactly one of the following: (1) `"z1`", or (2) `"z2`" (see below) 

Here, an `"X`" is defined by a `"Y`" and a `"Z`".  
The `"Y`" is a string parameter but the `"Z`" is given by a model (which will require its own set of parameters).
The options for `"Z`" will then be described as a spec:

 * `"z1`" applies model z1.  Requires `"z1a`" ``[string]``

 * `"z2`" applies model z2.  Requires `"z2a`" ``[double]`` and `"z2b`" ``[int]``

An example of using such a specification:

.. code-block:: xml

    <ParameterList name="X">
      <Parameter name="Y" type="string" value="hello"/>
      <ParameterList name="z2">
        <Parameter name="z2a" type="double" value="0.7"/>
        <Parameter name="z2b" type="int" value="3"/>
      </ParameterList>   
    </ParameterList>   
 
Here, the user is defining X with Y="hello", and Z will be a z2 constructed with z2a=0.7 and z2b=3.

Conventions:

* Reserved keywords and labels are `"quoted and italicized`" -- these
  labels or values of parameters in user-generated input files must
  match (using XML matching rules) the specified or allowable values.

* User-defined labels are indicated with ALL-CAPS, and are meant to
  represent a typical name given by a user - these can be names or
  numbers or whatever serves best the organization of the user input
  data.

* Bold values are default values, and are used if the Parameter
  is not provided.


Symbol Index
############

.. include:: symbol_table.rst
  
Main
####
{ simulation_driver }
  

Mesh
####
{ ats_mesh_factory }


Region
######
{ Region }

All
===
{ RegionAll }

Box
===
{ RegionBox }

Plane
=====
{ RegionPlane }

Labeled Set
===========
{ RegionLabeledSet }

Function Color
==============
{ RegionFunctionColor }

Point
=====
{ RegionPoint }

Logical
=======
{ RegionLogical }

Polygon
=======
{ RegionPolygon}

Enumerated
==========
{ RegionEnumerated }

Boundary
========
{ RegionBoundary }

Box Volume Fractions
====================
{ RegionBoxVolumeFractions }

Line Segment
============
{ RegionLineSegment }


Coordinator
############
{ coordinator }
   

Visualization
##############
{ Visualization }


Checkpoint
##############
{ Checkpoint }  


 
Observation
##############
{ Observable }


PK
###
{ PK }

Base PKs
========
There are several types of PKs, and each PK has its own valid input
spec.  However, there are three main types of PKs, from which nearly
all PKs derive.  Note that none of these are true PKs and cannot stand
alone.

PK: Physical
------------
{ pk_physical_default }


PK: BDF
-------
{ pk_bdf_default }

PK: Physical and BDF
--------------------
{ pk_physical_bdf_default }

Physical PKs
============
Physical PKs are the physical capability implemented within ATS.

Flow PKs
--------

Flow PKs describe the conservation of mass of water as it flows both
above and below-ground.  Subsurface flow PKs are based on 3D Richards
equation, which describes variably saturated flow in porous media.
Minor variations to this include the incorporation of freeze-thaw
processes.  Surface flow PKs are based on a diffusion wave equation
and Manning's model for sheet flow.  Variations to this also include
the incorporation of freeze-thaw processes.  Finally we include in
flow a "snow distribution" algorithm which takes as input
precipitation and applies it based on the existing surface level
(elevation + water + snowpack), thereby "filling in" low-lying areas
preferentially.  This makes for more accurate snowpacks at fine
scales.

Richards PK
^^^^^^^^^^^
{ richards }

Permafrost Flow PK
^^^^^^^^^^^^^^^^^^
{ permafrost }

Overland Flow PK
^^^^^^^^^^^^^^^^
{ overland_pressure }

Overland Flow with Ice
^^^^^^^^^^^^^^^^^^^^^^
{ icy_overland }

Snow Distribution PK
^^^^^^^^^^^^^^^^^^^^
{ snow_distribution }


Energy PKs
-----------

Energy PKs describe the conservation of energy as it is advected and
diffuses both above and below-ground.  Both surface and subsurface
energy equations are based on a simple advection-diffusion equation,
and include variants with and without freeze-thaw processes.

Energy Base PK
^^^^^^^^^^^^^^
{ energy_base }

Two-Phase subsurface Energy PK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_two_phase }

Three-Phase subsurface Energy PK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_three_phase }

Overland energy with Ice
^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_surface_ice }



Surface Energy Balance PKs
------------------------------

Integrated hydrology is not much use without significant process
complexity in source terms coming from the ecohydrologic environment.
These include straightforward sources, like precipitation, but also
more complicated ones such as evaporation and transpiration.

These terms are almost always tied up in a surface energy balance --
evaporation and transpiration are driven by vapor pressure gradients
between the atmosphere and the surface (either snow, ponded water,
soil, or leaf).  Solving a surface energy balance often requires
providing a bunch of terms, including radiated energy, conducted
energy, latent and sensible heat models, etc.

ATS currently has several approaches to calculating these -- see
`ats-demos <https://github.com/amanzi/ats-demos>`_ examples on
ecohydrology for a more in-depth discussion.

Balance Equation
^^^^^^^^^^^^^^^^
{ surface_balance_base }


Snow Balance Equation
^^^^^^^^^^^^^^^^^^^^^
{ surface_balance_implicit_subgrid }

Biogeochemistry
---------------

To accurately predict watershed ecohydrology, a carbon cycle model is
needed to predict transpiration.  By simulating a carbon cycle, we are
able to predict the rate of photosynthesis as a function of space and
time, and photosynthesis governs root water uptake.  Currently only
one big-leaf model is available, but ongoing work is wrapping a
generalized Common/Colorado Land Model based on that developed within
the ParFlow team, and another ongoing project is working on wrapping
kernels from E3SM's Land Model.

Biogeochemistry -- Monolithic Version
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ bgc_simple }



Deformation
-------------

The unstructured mesh framework we use provides the opportunity to
include deformation of the mesh.  This deformation can be done in two
ways -- either node coordinate changes are provided, or volumetric
changes are provided, and the code attempts to iterate toward a global
coordinate change that satisfies these volumetric changes.  The latter
can be somewhat fragile for large deformation, but it does allow
simple deformation such as small, somewhat uniform subsidence.  The
volumetric deformation PK below does this based on a volumetric change
given by loss of bulk ice.

Volumetric Deformation
^^^^^^^^^^^^^^^^^^^^^^
{ volumetric_deformation }


MPC
===

Multi-process-couplers or MPCs couple other PKs.  They also are PKs
themselves, in that they implement the PK interface.  So MPCs can also
couple other MPCs.  There are a few common "base" MPCs which do the
simplest form of coupling -- sequential and globally implicit (with a
diagonal preconditioner).  Then there are specific couplers which know
more about their coupled sub-PKs, and can do more complicated things
(for instance, adding off-diagonal block entries to the
preconditioner).

MPCs are also used to couple across domains -- for instance integrated
hydrology is a surface+subsurface flow coupler.  They also can do
fancier things like drape a bunch of subgrid columns off of a mesh, or
other things.  Think of these as the custom couplers.

Base MPC
--------
{ mpc }


WeakMPC
-------
{ weak_mpc }

StrongMPC
----------
{ strong_mpc }

Physical MPCs
===============

Coupling is an art, and often requires special off-diagonal work for
globally implicit coupling, and fancy games can be played with domains
to couple across domain interfaces both implicitly and sequentially.
Physical MPCs derive from default MPCs to provide special
implementations of some methods.

Coupled Water MPC
-----------------
{ mpc_coupled_water }

Coupled Cells MPC
-----------------
{ mpc_coupled_cells }

Subsurface MPC
--------------
{ mpc_subsurface }

Permafrost MPC
--------------
{ mpc_permafrost }

Globalization Delegates
=======================

Globalization is the art of convincing a solver to find the solution.
Remember -- physics typically cares very little about *how* you get to
a solution, only that you get there.  If you can guess or otherwise
find the solution physically, without doing fancy math, go for it!
These delegates are handy utility classes which are used by MPCs to
effeciently leverage physics understanding in the mathematical solvers
to nudge the solver in the direction of a reasonable solution, or to
keep a solver from going off into a part of space which is totally
unphysical.  These can often make the difference between converging
and not converging.

Much of the efficiency of ATS comes from these delegates, and more of
them are always welcome contributions.

Coupled Water Globalization Delegate
------------------------------------
{ mpc_delegate_water }

EWC Globalization Delegate
--------------------------
{ mpc_delegate_ewc }

State
##############

State consists of two sublists, one for evaluators and the other for
atomic constants.  The latter is currently called `"initial
conditions`", which is a terrible name which must be fixed.

example:

.. code-block:: xml
                
  <ParameterList name="state">
    <ParameterList name="field evaluators">
      ...
    </ParameterList>
    <ParameterList name="initial conditions">
      ...
    </ParameterList>
  </ParameterList>

 

Field Evaluators
=================


PrimaryVariableEvaluator
------------------------
{ primary_variable_field_evaluator }


IndependentVariableEvaluator
----------------------------

Independent variables are provided either by a function or directly loaded from a file.

From Function
^^^^^^^^^^^^^
{ independent_variable_field_evaluator_fromfunction }

From File
^^^^^^^^^
{ independent_variable_field_evaluator_fromfile }


Water Content
-------------

Water content is the conserved quantity in most flow equations, including
Richard's equation with and without ice.  A variety of evaluators are provided
for inclusion of multiple phases.

Richards Equation water content
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ richards_water_content_evaluator }

Liquid+Gas water content
^^^^^^^^^^^^^^^^^^^^^^^^
{ liquid_gas_water_content_evaluator }

Liquid+Ice water content
^^^^^^^^^^^^^^^^^^^^^^^^
{ liquid_ice_water_content_evaluator }

Liquid+Ice+Gas water content
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ three_phase_water_content_evaluator }


Surface Water potential surfaces
--------------------------------

Evaluators for 

SurfaceElevation
^^^^^^^^^^^^^^^^^^
{ meshed_elevation_evaluator }

SurfacePotential
^^^^^^^^^^^^^^^^^^^
{ pres_elev_evaluator }

SnowSurfacePotential
^^^^^^^^^^^^^^^^^^^^^^
{ snow_skin_potential_evaluator }

Surface water content
^^^^^^^^^^^^^^^^^^^^^
{ overland_pressure_water_content_evaluator }


..
    KEEP GOING!

    
Generic Evaluators
---------------------------------

Several generic evaluators are provided.

Additive
^^^^^^^^
{ AdditiveEvaluator }

Multiplicative
^^^^^^^^^^^^^^
{ MultiplicativeEvaluator }

Column summation
^^^^^^^^^^^^^^^^
{ ColumnSumEvaluator }

Subgrid disaggregation
^^^^^^^^^^^^^^^^^^^^^^
{ SubgridDisaggregateEvaluator }



InitialConditions
=================

Initial condition specs are used in two places:

* within the PK_ spec which describes the initial condition of primary variables (true
  initial conditions), and

* in the `"initial conditions`" sublist of state, in which the value
  of atomic constants are provided (not really initial conditions and
  should be renamed).  These atomic values are not controlled by
  evaluators, and are not included in the DaG.  Likely these should be
  removed entirely.
  
Initialization of constant scalars
------------------------------------

A constant scalar field is the global (with respect to the mesh)
constant.  At the moment, the set of such fields includes atmospheric
pressure.  The initialization requires to provide a named sublist with
a single parameter `"value`".

.. code-block:: xml

  <ParameterList name="fluid_density">
    <Parameter name="value" type="double" value="998.0"/>
  </ParameterList>


Initialization of constant vectors
------------------------------------

A constant vector field is the global (with respect to the mesh)
vector constant.  At the moment, the set of such vector constants
includes gravity.  The initialization requires to provide a named
sublist with a single parameter `"Array(double)`". In two dimensions,
is looks like

.. code-block:: xml

  <ParameterList name="gravity">
    <Parameter name="value" type="Array(double)" value="{{0.0, -9.81}}"/>
  </ParameterList>


Initialization of scalar fields
------------------------------------

A variable scalar field is defined by a few functions (labeled for instance,
`"Mesh Block i`" with non-overlapping ranges. 
The required parameters for each function are `"region`", `"component`",
and the function itself.

.. code-block:: xml

  <ParameterList name="porosity"> 
    <ParameterList name="function">
      <ParameterList name="Mesh Block 1">
        <Parameter name="region" type="string" value="Computational domain"/>
        <Parameter name="component" type="string" value="cell"/>
        <ParameterList name="function">
          <ParameterList name="function-constant">
            <Parameter name="value" type="double" value="0.2"/>
          </ParameterList>
        </ParameterList>
      </ParameterList>
      <ParameterList name="Mesh Block 2">
        ...
      </ParameterList>
    </ParameterList>
  </ParameterList>


Initialization of tensor fields
------------------------------------
 
A variable tensor (or vector) field is defined similarly to a variable
scalar field.  The difference lies in the definition of the function
which is now a multi-values function.  The required parameters are
`"Number of DoFs`" and `"Function type`".

.. code-block:: xml

  <ParameterList name="function">
    <Parameter name="Number of DoFs" type="int" value="2"/>
    <Parameter name="Function type" type="string" value="composite function"/>
    <ParameterList name="DoF 1 Function">
      <ParameterList name="function-constant">
        <Parameter name="value" type="double" value="1.9976e-12"/>
      </ParameterList>
    </ParameterList>
    <ParameterList name="DoF 2 Function">
      <ParameterList name="function-constant">
        <Parameter name="value" type="double" value="1.9976e-13"/>
      </ParameterList>
    </ParameterList>
  </ParameterList>


Initialization from a file
------------------------------------

Some data can be initialized from files. Additional sublist has to be
added to named sublist of the `"state`" list with the file name and
the name of attribute.  For a serial run, the file extension must be
`".exo`".  For a parallel run, it must be `".par`".  Here is an
example:

.. code-block:: xml

  <ParameterList name="permeability">
    <ParameterList name="exodus file initialization">
      <Parameter name="file" type="string" value="mesh_with_data.exo"/>
      <Parameter name="attribute" type="string" value="perm"/>
    </ParameterList>
  </ParameterList>



example:

.. code-block:: xml

  <ParameterList name="state">
    <ParameterList name="initial conditions">
      <ParameterList name="fluid_density">
        <Parameter name="value" type="double" value="998.0"/>
      </ParameterList>

      <ParameterList name="fluid_viscosity">
        <Parameter name="value" type="double" value="0.001"/>
      </ParameterList>

      <ParameterList name="gravity">
        <Parameter name="value" type="Array(double)" value="{{0.0, -9.81}}"/>
      </ParameterList>

    </ParameterList>
  </ParameterList>



BoundaryConditions
===================

{ bc_factory }

Flow-specific Boundary Conditions
----------------------------------

{ flow_bc_factory }






Time integrators, solvers, and other mathematical specs
#######################################################

  Common specs for all solvers and time integrators, used in PKs.

There are three commonly used broad classes of time integration
strategies.

"Update" methods are the simplest -- they use no formal
mathematical definition of a differential equation, but instead
implicitly use a process by which variables at the new time are
directly calculated.  Typically there *is* an implied ODE or PDE here,
but it is not stated as such and time integration routines are not
used.  Examples of these are common in biogeochemistry and vegetation
models.

"Explicit" time methods are the next simplest.  These include a
variety of options from forward Euler to higher order Runge-Kutta
schemes.  These only require evaluating forward models where we have
existing of the dependencies.  If they work, these are great thanks to
their deterministic nature and lack of expensive, memory-bandwith
limited solvers.  But they only work on some types of problems.
Examples of of these include transport, where we use high order time
integration schemes to preserve fronts.

"Implicit" and semi-implicit methods instead require the evaluation of
a residual equation -- the solution is guessed at, and the residual is
calculated, which measures how far the equation is from being
satisfied.  This measure is then inverted, finding a correction to the
guess which hopefully reduces the residual.  As the residual goes to
zero, the error, a measure of the difference between the guess and the
true solution, also goes to zero.  To do this inversion, we lean on
Newton and Newton-like methods, which attempt to somehow linearize, or
approximately linearize, the residual function near the guess in order
to calculate an update.  In this case, the time integration scheme
requires both a nonlinear solver (to drive the residual to zero) and a
linear solver or approximate solver (to calculate the correction).

TimeIntegrator
==============

Currently there are two classes of time integration schemes used in
ATS: explicit (including a range of single and multi-stage) methods
and BDF1, or Backward Euler.

Explicit Time Integration
-------------------------
{ Explicit_TI_RK }

Backward Euler
--------------
{ BDF1_TI }

BDF1 Solver Interface
^^^^^^^^^^^^^^^^^^^^^
{ BDF1_SolverFnBase }

Timestep Controller
-------------------
{ TimestepControllerFactory }

Timestep Controller Fixed
^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerFixed }

Timestep Controller Standard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerStandard }

Timestep Controller Smarter
^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerSmarter }

Timestep Controller Adaptive
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerAdaptive }

Timestep Controller From File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerFromFile }


Nonlinear Solver
================
.. _Solver:
   
{ SolverFactory }

Solver: Newton and Inexact Newton
---------------------------------
{ SolverNewton }

Solver: Jacobian-Free Newton Krylov
-----------------------------------
{ SolverJFNK }
{ MatrixJF }

Solver: Newton with Line Search
-------------------------------
{ SolverBT }

Solver: Nonlinear Continuation
------------------------------
{ SolverContinuation }

Solver: Nonlinear Krylov Acceleration
-------------------------------------
{ SolverNKA }

Solver: Anderson Acceleration
-----------------------------
{ SolverAA }

Solver: NKA with Line Search
----------------------------
{ SolverNKA_LS }

Solver: NKA with Line Search, ATS
---------------------------------
{ SolverNKA_LS_ATS }

Solver: NKA with backtracking, ATS
----------------------------------
{ SolverNKA_BT_ATS }

Solver: NOX
----------------------------------
{ SolverNox }


Linear Solvers
==============
.. _LinearOperator:
.. _`LinearSolvers`:
.. _`Linear Solver`:

{ LinearOperator }

Linear Solver: PCG
--------------------
{ LinearOperatorPCG }

Linear Solver: GMRES
--------------------
{ LinearOperatorGMRES }

Linear Solver: NKA
--------------------
{ LinearOperatorNKA }

Linear Solver: Amesos
---------------------
{ LinearOperatorAmesos }

Linear Solver: Belos GMRES
--------------------------
{ LinearOperatorBelosGMRES }


Preconditioners
===============
.. _Preconditioner:

{ Preconditioner }


Identity
--------
{ PreconditionerIdentity }

Diagonal
--------
{ PreconditionerDiagonal }

Block ILU
---------
{ PreconditionerBlockILU }

Boomer AMG
----------
{ PreconditionerBoomerAMG }

Euclid
------
{ PreconditionerEuclid }

ML (Trilinos AMG)
-----------------
{ PreconditionerML }


Other Common Specs
##################

IOEvent
=======
{ IOEvent }

Verbose Object
==============
{ VerboseObject }

Debugger
========
{ Debugger }
   

Function
===================
{ Function }

It is straightforward to add new functions as needed.

Constant Function
-------------------------
{ FunctionConstant }  

Tabular Function
-------------------------
{ FunctionTabular }

Smooth step Function
-------------------------
{ FunctionSmoothStep }

Polynomial Function
-------------------------
{ FunctionPolynomial }  

Multi-variable linear Function
------------------------------
{ FunctionLinear }  

Separable Function
------------------
{ FunctionSeparable }

Additive Function
------------------
{ FunctionAdditive }

Multiplicative Function
--------------------------
{ FunctionMultiplicative }

Composition Function
--------------------------
{ FunctionComposition }

Piecewise Bilinear Function
---------------------------
{ FunctionBilinear }

Distance Function
-----------------
{ FunctionDistance }

Monomial Function
-----------------
{ FunctionMonomial }

Standard Math Function
----------------------
{ FunctionStandardMath }



Operator
========

{ Operator }

PDE_Accumulation
----------------
{ PDE_Accumulation }

PDE_Diffusion
-------------
{ PDE_DiffusionFactory }

{ PDE_Diffusion }

{ PDE_DiffusionMFD }

{ PDE_DiffusionMFDwithGravity }

{ PDE_DiffusionFV }

{ PDE_DiffusionFVwithGravity }


PDE_Advection
-------------

{ PDE_Advection }

{ PDE_AdvectionUpwind }



